let mapleader=" "
set number
set encoding=utf-8
set fileencoding=utf-8
set hidden
set conceallevel=0
set smartcase
set textwidth=80
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set noshiftround
set updatetime=300
set shortmess+=c
set smartcase
set hlsearch
set cmdheight=2

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" use tree as default for netrw
let g:netrw_liststyle = 3


call plug#begin('~/.vim/plugged')

Plug 'easymotion/vim-easymotion'
Plug 'vim-scripts/DoxygenToolkit.vim'
Plug 'vim-scripts/DoxyGen-Syntax'
Plug 'Yggdroot/indentLine',{ 'for': 'cpp' }
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'lervag/vimtex'
" If you don't have nodejs and yarn
" use pre build, add 'vim-plug' to the filetype list so vim-plug can update this plugin
" see: https://github.com/iamcco/markdown-preview.nvim/issues/50
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'rhysd/vim-grammarous'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/fzf.vim'
Plug 'preservim/nerdcommenter'
Plug 'brooth/far.vim'

" Plugin mappings 

" fzf
nnoremap <silent>ff <cmd>Files<cr>
nnoremap <silent>fg <cmd>Rg<cr>
nnoremap <silent>fb <cmd>Buffers<cr>
nnoremap <silent>fc <cmd>Commits<cr>

" Coc command bindings:
nmap ca :CocAction<cr>
" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
nmap <leader>a  <Plug>(coc-codeaction-cursor)
" nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
" nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

nmap rn <Plug>(coc-rename)
" cycle diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" easymotion
nmap s <Plug>(easymotion-overwin-f)
nmap S <Plug>(easymotion-overwin-line)
let g:EasyMotion_do_mapping = 0 " Disable default mappings
let g:EasyMotion_smartcase = 1

autocmd BufNewFile,BufRead *.cpp set syntax=cpp.doxygen
autocmd BufNewFile,BufRead *.cc set syntax=cpp.doxygen
autocmd BufNewFile,BufRead *.h set syntax=cpp.doxygen
autocmd BufNewFile,BufRead *.hpp set syntax=cpp.doxygen

" don't really know why.
let g:tex_flavor='latex'
let g:grammarous#jar_url = 'https://www.languagetool.org/download/LanguageTool-5.9.zip'
let g:grammarous#use_vim_spelllang=1

" CoC: {{{
if exists('g:did_coc_loaded')
  hi! CocErrorFloat ctermfg=blue guifg=#ff0000
  hi! CocInfoFloat ctermfg=black guifg=#fab005
  hi! CocHintFloat ctermfg=black guifg=#fab005
  hi! CocFloating ctermfg=red guifg=#fab005
endif
" }}}
call plug#end()

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" custom mappings
"

" prettyfy json
nmap gj :%!python -m json.tool

" Use ctrl-[hjkl] to select the active split!
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

" Custom funcions
nmap cm :call CompileMain()<cr>
function CompileMain()
  let compileResult = system("cd build && ninja")
  let fail = "ninja: build stopped: subcommand failed."
  if (stridx(compileResult, fail) != -1)
    vsplit __compile_result__
    normal! ggdG
    setlocal buftype=nofile
    call append(0, split(compileResult,'\v\n'))
  else 
    echo "build success"
  endif
endfunction

autocmd VimEnter,ColorScheme * hi! link CocMenuSel PMenuSel
autocmd VimEnter,ColorScheme * hi! link CocSearch Identifier
